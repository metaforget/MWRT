# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: MWRT-CI

on: workflow_dispatch

permissions:
  contents: read

env:
  IMM_DIR: './imm' 

jobs:

  build_mwrt:

    name: Build MWRT Firmware

    runs-on: ubuntu-latest

    steps:
      - name: Space cleanup and Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"
      
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true
      
      - name: Checkout MWRT
        uses: actions/checkout@v4
        with: 
          ref: main
          path: 'mwrt'
      
      - name: Checkout immortalwrt
        uses: actions/checkout@v4
        with: 
          repository: immortalwrt/immortalwrt
          ref: ${{ vars.IMM_TAG }}
          path: 'imm'
      
      # 改预设文件内容，为其添加默认的密码LOGIN_PASSWD
      - name: add defaults uci-configs
        env:
          LOGIN_PASSWD: ${{ secrets.LOGIN_PASSWD }}
        run: |
          echo '改预设文件内容，为其添加默认的密码LOGIN_PASSWD'
          cd mwrt
          ls -al
          sed -i "1i LOGIN_PASSWD=$LOGIN_PASSWD" 99-custom
          mkdir -p ../imm/files/etc/uci-defaults
          cp 99-custom ../imm/files/etc/uci-defaults/
      
      # 改feeds文件
      # 拉不在feeds中的文件
      # 把文件都放到对应目录中    
      - name: update imm
        working-directory: ${{ env.IMM_DIR }}
        run: |
          echo '改feeds文件'
          ls -al
          sed -i "1i src-git openclash https://github.com/vernesong/OpenClash.git" feeds.conf.default
          sed -i "1i src-git wrtbwmon https://github.com/brvphoenix/luci-app-wrtbwmon" feeds.conf.default
          sed -i "1i src-git wrtbwmon2 https://github.com/brvphoenix/wrtbwmon" feeds.conf.default
          echo '展示feeds配置文件内容：'
          cat feeds.conf.default
          cd ..
          git clone --depth=1 https://github.com/sirpdboy/luci-app-advanced.git
          mkdir -p imm/package/meta/
          cp -r luci-app-advanced imm/package/meta/
          echo '展示imm'
          ls -al imm  
      
      - name: Update feeds
        working-directory: ${{ env.IMM_DIR }}
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        working-directory: ${{ env.IMM_DIR }}
        run: |
          rm -f .config
          cp ../mwrt/diffconfig .config
          echo '展示替换.config之后的imm'
          ls -al
          make defconfig

      - name: Download packages
        working-directory: ${{ env.IMM_DIR }}
        run: make download -j$(nproc)

      - name: Compile firmware
        working-directory: ${{ env.IMM_DIR }}
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        working-directory: ${{ env.IMM_DIR }}
        run: |
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Upload buildinfo
        uses: actions/upload-artifact@v4
        with:
          name: MWRT_buildinfo
          path: ${{ env.IMM_DIR }}/artifact/buildinfo/

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: MWRT_package
          path: ${{ env.IMM_DIR }}/artifact/package/

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: MWRT_firmware
          path: ${{ env.IMM_DIR }}/bin/targets/